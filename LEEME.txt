


MANUAL DE COMPILACIÓN PARA EL SOC BLE NRF51822 EN LINUX CON EL COMPILADOR GCC-ARM Y EL SDK NRF51 DE
                                NORDIC SEMICONDUCTORS EN SU VERSIÓN 12.2


  **NOTA: LOS PROGRAMAS QUE SE COMPILAN CON ESTE MANUAL HACEN USO DEL SOFTDEVICE S130 DE NORDIC. 
          (ver manual con SoftDevice de Nordic Semiconductors).

  Escrito para la plantilla de projecto de aplicación BLE incluida en el SDK de Nordic Semiconductors.

          Copyrigth© 2016 Alfredo Orozco de la Paz
          alfredoopa@gmail.com


################################################################################################################
    ACTUALIZACIONES: 

    1-Marzo-2017:
    
    	* Nueva versión de las herramientas para compilar con el SDK 12.2 de Nordic Semiconductors©

################################################################################################################

################################################################################################################

ARCHIVOS Y HERRAMIENAS NECESARIAS

Para poder compilar un proyecto para el SOC NRF51822 bajo una plataforma linux, son necesarias varias
herramientas de desarrollo: un compilador, en este caso el compilador para arquitecturas ARM, ya que el
SOC cuenta con un procesador ARM Cortex-M0 y un SDK (Software Development Kit), que es proporcionado por
Nordic Semiconductors e incluye una basta lista de bibliotecas y ejemplos para programar el SOC, sus
periféricos y  aplicaciones BLE.

Los programas necesarios son:

    Compilador GCC-ARM: Para este maunal se usa el toolchian  gcc-arm-none-eabi-4_9 
                        Puede descargarse de:   https://launchpad.net/gcc-arm-embedded

    NRF51_SDK:          Para este manual se utiliza la versión 12.2
                        Puede descargarse de:   https://developer.nordicsemi.com/
 
    SEGGER JLink
    Software:           Software para grabar el firmware en el SOC con el programador JLink
                        Puede descargarse de:   https://www.segger.com/jlink-software.html


################################################################################################################

INSTALACIÓN DEL COMPILADOR GCC-ARM

Para instalar el compilador, basta con descargar el archivo desde la página oficial y descomprimirlo.
Por facilidad de programación y de configuración, es recomendable copiar la carpeta del toolchain en
la carpeta /opt/.

    *IMPORTANTE: la copia de los archivos se debe hacer como usuario root, ya que la carpeta /opt/
                 es del sistema.

################################################################################################################

INSTALACIÓN DEL SOFTWARE JLink

Para instalar el software del programador hay que descargarlo de la página oficial, es un instalador
con la extension ".deb", lo único que hay que hacer es ejecutarlo y la instalación se hara automáticamente.

Por default, la ruta de la carpeta donde se instalan los archivos del programador es:

        /opt/SEGGER/JLink

Para probar la instalación, en una terminal se debe ejecutar el comando:

        $ JLinkExe

Esto mostrará la linea de comandos del programador JLink


################################################################################################################

INSTALACIÓN Y CONFIGURACIÓN DEL SDK

Para instalar el SKD, se debe descomprimir el archivo descargado, y de igual manera que el toolchain, copiar 
su contenido en la carpeta /opt/nRF51_SDK_12.

    *IMPORTANTE: la copia de los archivos se debe hacer como usuario root, ya que la carpeta /opt/
                 es del sistema.

Esta carpeta contiene todos los archivos necesarios para desarrollar aplicaciónes con el chip NRF51822 y
otros de la familia NRF51.

Se debe modificar el archivo makefile para linux en el cual se agrega la ruta donde se encuentra instalado
el toolchain GCC-ARM. Este archivo se llama Makefile.posix y encuentra dentro del SDK en:
      
                                        componentes/toolchain/gcc.

En este archivo se modifica la linea 
        
        GNU_INSTALL_ROOT := /usr/local/gcc-arm-none-eabi-3_9

Agregando la ruta del toolchain, que se encuentra en la carpeta /opt/:

        GNU_INSTALL_ROOT := /opt/gcc-arm-none-eabi-5_4
		GNU_VERSION := 5.4
		GNU_PREFIX := arm-none-eabi

        *IMPORTANTE: para crear y modificar archivos dentro de la carpeta del SDK es necesario darle permisos
                     al usuario, ya que al copiarla en /opt/ pertenece al sistema (root) y no al usuario, 
                     para hacer esto se usa el comando:   $ sudo chown USUARIO /opt/CARPETA_DEL_SDK_12


################################################################################################################

COMPILACIÓN DE UN PROYECTO con BlueStack

Este documento incluye una plantilla de proyecto para el SOC NRF51822 en un archivo comprimido llamado 
BlueStack-nrf51822-gcc-linux-template.zip, el cual contiene la estructura siguiente:

+-> BlueStack-nrf51822-gcc-linux-template/
    +-> BlueStack/
        +-> include/
        	* BlueStack.h
     		* bluestack_events.h
     		* bluestack_service.h
        +-> src/
        	* BlueStack.c
     	 	* bluestack_events.c
     	 	* bluestack_service.c
        +-> softdevice/
        	* s130_nrf51_2.0.1.hex
        * ble_app_gcc_nrf51.ld
        * Makefile.bs
    +-> include/
        * ble400.h
        * bluestack_config.h
        * sdk_config.h
    * main.c
    * Makefile
    * LEEME.txt
    * NOTAS.txt
    

En la carpeta BlueStack se encuentran las bibliotecas con funciones y definiciones para implementar
e inicializar un dispositivo periférico BLE usando el SDK de Nordic.

BlueStack/include/:
	Contiene los archivos de cabecera con las funciones y definiciones del framework. 

BlueStack/softdevice/:
	Contiene el archivo ejecutable en formato hexadecimal del SoftDevice 130.

include/:
	Contiene los archivos de cabecera definidos por el usuario y el archivo de configuración
	de los drivers del SKD de Nordic. Si se necesita utilizar algun driver de Nordic se debe habilitar
	y configurar en el archivo sdk_config.h y agregar el include del driver en el archivo Makefile.

BlueStack.h:
	Contiene la estructura y funciones para inicializar el softdevice de Nordic, asi
	como para configurar el dispositivo (nombre, manejadores de eventos, etc). El 
	archivo BlueStack.c contiene la implementacións de las funciones definidas en este
	archivo.

	Contiene las definiciones de las funciones que configurarn los parámetros
	de una comunicación BLE, como el GATT, GAP, ADVERTISING y seguridad del dispositivo. La implementación
	de estas funciones se encuentra en el archivo bluestack_inits.c, y se deben cambiar para adaptarse a la
	aplicación a desarrollar, o si se desea un comportamiento diferente al definido.

bluestack_events.h:
	Contiene las definciones de las funciones que despachan y manejan eventos
	provenientes del softdevice, como la conexión, desconexión, emparejamiento, estado del adverstisin, y todos
	los eventos relacionados con el softdevice y el BLE. La implementación de estas funciones se encuentra de manera
	opcional en el archivo bluestack_events.c. El programador queda a cargo de la modificación de las acciones que
	se realizarán con los eventos generados y como serán manejados de acuerdo a la aplicación a desarrollar.

bluestack_service.h:
	Contiene las definciones de las funciones y estructuras para definir e inicializar servicios BLE.
	Cuenta con estructuras que definen Servicios y Características BLE, junto con
	las funciones para incializar eventos. La API BlueStack puede manejar hasta 16 servicios
	con hasta 32 características cada una.

ble400.h:
	Define los pines para los botones, leds y conectores externos de la tarjeta BLE400.
	Si se usa aluna otra placa, el usuario puede crear su respectivo .h definiendo los recursos de la
	placa.

bluestack_config.h: 
	Contiene las definiciones de configuración avanzada BLE para el softdevice, estos parámetos se deben
	modificar de a cuerdo a cada aplicación.

sdk_config.h
	Contiene la configuración de los drivers del SDK de Nordic. Se deben habilitar aquí para poder utilizarse 
	en código. Aqui se configura por ejemplo el uso de la UART, SPI, I2C, etc, para usarse con las bibliotecas 
	de Nordic (app_uart, app_spi, app_i2c, app_xxx).



La carpeta "services" contiene los servicios de usuario que tendrá la aplicación, se incluten los archivos 
ble_custom_service.h y ble_custom_service.c son las bibliotecas que integran un servicio definido por el usuario.

Es necesario modificar el archivo Makefile del proyecto, agregando correctamente la ruta del SDK en la linea:

    SDK_PATH = /opt/"CARPETA_SDK"


Para compilar, hay que entrar desde una terminal a la carpeta del proyecto y se ejecuta el comando "make", 
si todas las herramientes y el proyecto quedaron configurados correctamente, la compilación no debe mostrar errores.

La compilación creará una carpeta llamada "_build" donde se encuentran los archivos objeto generados por
el compilador incluyendo los ejecutables .hex y .bin del programa.

El archivo Makefile cuenta con las opciones para programar el chin NRF51822 con el programador JLink,
es necesario tener instalado el Software de Segger© para programar con makefile.

Para borrar el chip completamente (incluyendo softdevice) se utiliza:	make erase
Para programar el firmware compilado dentro del chip con softdevice:	make flash
Para programar el Softdevice en su version 130 se utiliza:				make flash-softdevice
Para reiniciar el programa dentro del chip se utiliza:					make reset
para limpiar todo el proyecto compilado se utiliza:						make clean

################################################################################################################

AGREGAR BIBLIOTECAS DEL SDK A NUESTRO PROYECTO

Para usar las bibliotecas incluidas en el SDK, a parte de incluirlas en nuestro main.c, se necesita modificar 
el archivo makefile para agregar las rutas en las que se encuentran estas bibliotecas, tanto la cabecera (.h) 
como el archivo fuente (.c), de lo contrario el compilador mostrará errores de que no encuentra los archivos
incluidos. Por ejemplo, si se quiere usar la librería delay, en el archivo makefile hay que buscar las lineas
de donde incluyen los archivos:


    --Para archivos fuente (.c):

        #source common to all targets
        SOURCE_FILES += $(PROJECT_PATH)/main.c 
        SOURCE_FILES += $(PROJECT_PATH)/include/myfile.c 
        SOURCE_FILES += ./include/services/myservice.c 

    --Para bibliotecas (.h)

        #includes common to all targets
        INCLUDE_FOLDERS += -I $(PROJECT_PATH)
        INCLUDE_FOLDERS += -I $(PROJECT_PATH)/include
        INCLUDE_FOLDERS += -I ./include/services


Por ejemplo, para usar la librería nrf_delay habría que incluir primero la definición en el archivo main.c,
despues agregar la ruta de carpeta del archivo fuente (.c) y al final la ruta de la libreria (.h), quedando algo como
esto:
        
         #source common to all targets
        SOURCE_FILES += $(PROJECT_PATH)/main.c 
        SOURCE_FILES += $(PROJECT_PATH)/include/myfile.c 
        SOURCE_FILES += ./include/services/myservice.c 
	->  SOURCE_FILES += $(SDK_PATH)/components/drivers_nrf/delay/nrf_delay.c 

        .
        .
        .

        #includes common to all targets
        INCLUDE_FOLDERS += -I $(PROJECT_PATH)
        INCLUDE_FOLDERS += -I $(PROJECT_PATH)/include
        INCLUDE_FOLDERS += -I ./include/services
	->  INCLUDE_FOLDERS += -I$(SDK_PATH)/components/drivers_nrf/delay   


Para agregar bibliotecas y archivos propios, sólo hay que agregar la ruta de nuestros archivos de igual manera.

################################################################################################################

PROGRAMACIÓN DEL FIRMWARE EN EL CHIP


 -> J-LINK SOFTWARE

    Antes de programar el nuevo firmware para el chip, se necesita borrar completamente la memoria flash
    ya que el firmware generado por esta plantilla no requiere el uso de la API SoftDevice, que es la
    encargada de implementar el Stack BLE.

    Para borrar la memoria flash del chip, hay que entrar  en una terminal y ejecutar los siguientes
    comandos:

        $JLinkExe

        JLink>  device nrf51822_xxac
        JLink>  w4 4001E504 2
        JLink>  w4 4001E50C 1
        JLink>  w4 4001E514 1
        JLink>  r
        JLink>  q

    El comando "device nrf51822_xxac" selecciona el modelo del chip.
    El comando "w4 4001e504 2"  permite el borrado de la flash (ver reference manual para los registros).
    El comando "w4 4001e50C 1"  borra toda la flash de programa (ver reference manual para los registros).
    El comando "w4 4001e50C 1"  borra la sección flash de información del usuario UICR (ver reference manual para los registros).
    

    Para programar el firmware con esta plantilla de ejemplo, se necesita el archivo ".hex" generado a la
    hora de compilar, se encuentra en la carpeta "bin" del proyecto.

    Entrar a una terminal y ejecutar los siguientes comandos:    

        $ JlinkExe      

        JLink>          
        JLink> device nrf51822_xxac
        JLink> w4 4001E504 1
        JLink> loadfile /ruta/completa/del/archivo/.hex
        JLink> r
        JLink> g

    El comando "w4 4001e504 1"  permite la escritura en flash (ver reference manual para los registros).
    El comando "loadfile /ruta/completa/del/archivo/.hex" graba el programa con extensión .hex en el chip.
    El comando "r" (reset) hace un reset de chip.
    El comando "g" (go) ejecuta el último programa cargado en flash.

    El archivo Makefile incluye estos y otros scripts para la programación del del firmware, los comandos disponibles para el programador JLink de Sergger son:

                   install:  graba el archivo ejecutable en el NRF51822
                     erase:  borra toda la memoria del NRF51822
                     reset:  hace un reset del firmware del NRF51822
        install-softdevice:  Graba el SoftDevice S110 en el NRF51822

    para ejecutarlos solo hay que escribir en la terminal 

        $ make install
              ó
        $ make erase
              ó
        $ make reset
              ó
        $ make install-softdevice
